// Calculate Betweeness and write to the nodes
CALL gds.betweenness.write("OnMart_v1", {
writeProperty: "between"
})
YIELD centralityDistribution, preProcessingMillis, computeMillis, postProcessingMillis, writeMillis, nodePropertiesWritten


// Compute percentiles
Match (c:Customer)
Where exists(c.between)
Return count(c.between) AS ind, avg(c.between) AS ave,
toFloat(percentileDisc(c.between,0.5)) AS P50,
toFloat(percentileDisc(c.between,0.75)) AS P75,
toFloat(percentileDisc(c.between,0.90)) AS P90,
toFloat(percentileDisc(c.between,0.95)) AS P95,
toFloat(percentileDisc(c.between,0.99)) AS P99,
toFloat(percentileDisc(c.between,1)) AS P100


// Display all betweenness scores for relevant customers
MATCH (c:Customer)-[:WROTE_REVIEW]->()-[:REVIEWS]->(:Product {productName: "Laptop Table - Multipurpose"})
Where exists(c.between)
WITH collect (distinct c.lastName) as userName,
     toInteger(c.between) as betweenness,
     c.tablesPageRank as pagerank,
     size((c)-[:WROTE_REVIEW]->()-[:REVIEWS]->()-[:IN_CATEGORY]->(:Category {category: 'Tables'})) AS TablesReviews
Return userName,
betweenness, pagerank, TablesReviews order by betweenness desc


// Cross-promot Tables product Laptop Table - Multipurpose with Produce
MATCH (c:Customer)-[:WROTE_REVIEW]->()-[:REVIEWS]->(:Product {productName: "Laptop Table - Multipurpose"})
WHERE c.between > 2.0
WITH c ORDER BY c.between DESC LIMIT 50
MATCH (c:Customer)-[:WROTE_REVIEW]->(review)-[:REVIEWS]->( product )
WHERE ( product )-[:IN_CATEGORY]->(:Category {category: "Bookcases"})
WITH c, product , avg( toInteger(review.rating)) AS averageReviewRating, count(*) AS numberOfReviews
WHERE numberOfReviews >= 1
RETURN  c.lastName AS Customer, product.productName AS Product, averageReviewRating, numberOfReviews
ORDER BY averageReviewRating DESC, numberOfReviews DESC
LIMIT 10;

